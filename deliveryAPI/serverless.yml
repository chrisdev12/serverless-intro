service: mentoryAPI
frameworkVersion: "3"

plugins:
  - serverless-lift
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 4000
  tableName: "users-table-${sls:stage}"

layers:
  sharedLambdaLayer:
    path: .common # required, path to layer contents on disk
    name: ${sls:stage}-layerName # optional, Deployed Lambda layer name
    description: General DeliveryAPI lambda layer # optional, Description to publish to AWS
    compatibleRuntimes: # optional, a list of runtimes this layer is compatible with
      - nodejs14.x

provider:
  name: aws
  runtime: nodejs14.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [UsersTable, Arn]
  environment:
    ORDERS_TABLE: ${self:custom.tableName}
  layers:
    - !Ref sharedLambdaLayer

constructs:
  jobs:
    type: queue
    worker:
      handler: orderSubscription.handler

functions:
  GetOrderById:
    handler: orderHandler/getOrder.handler
    events:
      - httpApi:
          path: /order/{orderId}
          method: get
  PostOrder:
    handler: orderHandler/initOrder.handler
    events:
      - httpApi:
          path: /order
          method: post
    environment:
      QUEUE_URL: ${construct:jobs.queueUrl}

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableName}
